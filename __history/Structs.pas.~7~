unit Structs;

interface

uses
  Windows, Forms, System.Classes, SysUtils, ExtCtrls, Controls, Registry;

const
  xlAutomatic = $FFFFEFF7;
  xlContinuous = $00000001;
  xlHairline = 1; 	  // Самая тонкая граница
  xlMedium   = -4138; //	Средняя толщина
  xlThick    = 4;     //	Толстая граница
  xlThin     = 2;     //	Тонкая граница


  NotSpec: Single=987654321.0;

  dURightToLeft = 0;
  dURightSnake  = 1;
  dULeftToRight = 2;
  dULeftSnake   = 3;
  dLUpToDown    = 4;
  dLUpSnake     = 5;
  dLDownToUp    = 6;
  dLDownSnake   = 7;
  dDLeftToRight = 8;
  dDLeftSnake   = 9;
  dDRightToLeft = 10;
  dDRightSnake  = 11;
  dRDownToUp    = 12;
  dRDownSnake   = 13;
  dRUpToDown    = 14;
  dRUpSnake     = 15;

{
  ConnStr = 'Jet OLEDB:System database="";'+
            'Jet OLEDB:Registry Path="";'+
            'Jet OLEDB:Database Password="";'+
            'Jet OLEDB:Engine Type=5;'+
            'Jet OLEDB:Database Locking Mode=1;'+
            'Jet OLEDB:Global Partial Bulk Ops=2;'+
            'Jet OLEDB:Global Bulk Transactions=1;'+
            'Jet OLEDB:New Database Password="";'+
            'Jet OLEDB:Create System Database=False;'+
            'Jet OLEDB:Encrypt Database=False;'+
            'Jet OLEDB:Don''t Copy Locale on Compact=False;'+
            'Jet OLEDB:Compact Without Replica Repair=False;'+
            'Jet OLEDB:SFP=False;'+
            'Provider=Microsoft.Jet.OLEDB.4.0;'+
            'User ID=Admin;'+
            'Mode=Share Deny None;'+
            'Extended Properties="";';
}
  ConnStr = 'Provider=Microsoft.Jet.OLEDB.4.0;'+
            'Jet OLEDB:Create System Database=true;'+
            'Data Source=';

type
  TEventType = (evError, evOK, evInfo, evSave, evCreate);

  TDynArray = array of Single;

  TCadre = record
    StartX: WORD;
    StartY: WORD;
    ScaleX: WORD;
    ScaleY: WORD;
  end;

/////////////////////////////////////////

  TChipParams = record
    Value: Single;
    Stat : byte; // 0-?; 1-Годный; 2-ниже нормы; 3-выше нормы; 4-не измерялся
  end;

  TChip = record
    ID        : DWORD;
    Status    : WORD;
    ChipParams: array of TChipParams;
  end;
  PChip = ^TChip;
  TChips = array of array of TChip;

/////////////////////////////////////////

  TFail = record
    Status  : WORD;
    Name    : String[40];
    Quantity: WORD;
//    Col     : TColor;
  end;
  TFails = array of TFail;

/////////////////////////////////////////

  TNorma = record
    Min: Single;
    Max: Single;
  end;

  TTestParams = record
    Name  : string[40];
    Norma : TNorma;
    PUnit : string[10];
    PMode : string[30];
    Status: WORD;
  end;
  TTestsParams = array of TTestParams;
  PTestsParams = ^TTestsParams;

/////////////////////////////////////////

  TCalcParams = record
    Asum: Single;       // Сумма для Среднего
    Qsum: Single;       // Сумма квадратов для Стд. отклонения
    ValMass: TDynArray; // Массив параметров для медианы и квартилей
    ValCount: DWORD;    // Кол-во параметров

    NOKVal   : DWORD;
    NFailsVal: DWORD;
    
    AvrVal : Single; // Среднее
    MinVal : Single; // Минимальное
    MaxVal : Single; // Максимальное
    StdVal : Single; // Стд. отклонение
    MedVal : Single; // Медиана
    Qrt1Val: Single; // 1-й квартиль
    Qrt3Val: Single; // 3-й квартиль
  end;
  TCalcsParams = array of TCalcParams;

/////////////////////////////////////////

  procedure SortMassByValue(var Mass: TDynArray);
  function  GetExcelAppName2(): string;
  function  IsChip    (const Status: WORD): Boolean;
  function  IsFailChip(const Status: WORD): Boolean;
  function  EqualStatus(const Status1, Status2 : WORD): Boolean;
  procedure ErrMess(Handle: THandle; const ErrMes: String);
  function  QuestMess(Handle: THandle; const QStr: String): Integer;
  procedure InfoMess(Handle: THandle; const IStr: string);

implementation

//////////////////////////////////////////////////
procedure SortMassByValue(var Mass: TDynArray); //
var                                             //
  n, m, b_m: WORD;                              //
  b_val, tmpVal: Single;                        //
begin                                           //
  if Length(Mass) < 2 then Exit;                //
                                                //
  for n := 0 to Length(Mass)-2 do               //
  begin                                         //
    b_val := Mass[n];                           //
    b_m := n;                                   //
    for m := n+1 to Length(Mass)-1 do           //
      if Mass[m] < b_val then                   //
      begin                                     //
        b_val := Mass[m];                       //
        b_m := m;                               //
      end;                                      //
    tmpVal    := Mass[b_m];                     //
    Mass[b_m] := Mass[n];                       //
    Mass[n]   := tmpVal;                        //
  end;                                          //
end;                                            //
//////////////////////////////////////////////////

/////////////////////////////////////////////////////
function GetExcelAppName2(): string;               //
var                                                //
  reg: TRegistry;                                  //
  SL: TStringList;                                 //
  n: DWORD;                                        //
begin                                              //
  Result := '';                                    //
                                                   //
  reg := TRegistry.Create;                         //
  reg.RootKey := HKEY_CLASSES_ROOT;                //
  try                                              //
    if reg.OpenKeyReadOnly('') then                //
    begin                                          //
      SL := TStringList.Create();                  //
      reg.GetKeyNames(SL);                         //
      reg.CloseKey;                                //
    end                                            //
  finally                                          //
    reg.Free;                                      //
  end;                                             //
                                                   //
  if SL.Count > 0 then                             //
    for n := 0 to SL.Count-1 do                    //
      if Pos('Excel.Application', SL[n]) <> 0 then //
      begin                                        //
        Result := SL[n];                           //
        Break;                                     //
      end;                                         //
  SL.Free();                                       //
end;                                               //
/////////////////////////////////////////////////////

////////////////////////////////////////////////////
function IsChip(const Status: WORD): Boolean;     //
begin                                             //
  Result := False;                                //
                                                  //
  case Status of                                  //
    0         : Result := True;                   //
    1         : Result := True;                   //
    2         : ;                                 //
    3         : ;                                 //
    4         : ;//Result := True;                   //
    5         : ;                                 //
    7         : Result := True;                   //
    10..1500  : Result := True;                   //
    2000..3000: Result := True;                   //
    3500..4500: Result := True;                   //
  end;                                            //
end;                                              //
////////////////////////////////////////////////////
////////////////////////////////////////////////////
function IsFailChip(const Status: WORD): Boolean; //
begin                                             //
  Result := False;                                //
                                                  //
  case Status of                                  //
    0         : ;                                 //
    1         : ;                                 //
    2         : ;                                 //
    3         : ;                                 //
    4         : ;                                 //
    5         : ;                                 //
    7         : ;                                 //
    10..1500  : Result := True;                   //
    2000..3000: Result := True;                   //
    3500..4500: Result := True;                   //
  end;                                            //
end;                                              //
////////////////////////////////////////////////////
{
/////////////////////////////////////////////////////
function GetMainColor(const Status: WORD): TColor; //
begin                                              //
  case Status of                                   //
    0         : Result := clNotTested;             //
    1         : Result := clOK;                    //
    2         : Result := clNotChip;               //
    3         : Result := clNot4Testing;           //
    4         : Result := cl4Mark;                 //
    5         : Result := clRepper;                //
    7         : Result := clMRepper;               //
    10..1500  : Result := clFailNC;                //
    2000..3000: Result := clFailSC;                //
    3500..4500: Result := clFailFC;                //
  else          Result := clGray;                  //
  end;                                             //
end;                                               //
/////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////
function EqualStatus(const Status1, Status2 : WORD): Boolean;           //
begin                                                                   //
  Result := False;                                                      //
                                                                        //
  if Status1 = Status2 then Result := True                              //
  else                                                                  //
    if IsFailChip(Status1) and IsFailChip(Status1) then Result := True; //
end;                                                                    //
//////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////
procedure ErrMess(Handle: THandle; const ErrMes: String);                                //
begin                                                                                    //
  MessageBox(Handle, PChar(ErrMes), 'Ошибка!!!', MB_ICONERROR+MB_OK);                    //
end;                                                                                     //
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
function QuestMess(Handle: THandle; const QStr: String): Integer;                        //
begin                                                                                    //
  Result := MessageBox(Handle, PChar(Qstr), 'Подтверждение!', MB_ICONQUESTION+MB_YESNO); //
end;                                                                                     //
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
procedure InfoMess(Handle: THandle; const IStr: string);                                 //
begin                                                                                    //
  MessageBox(Handle, PChar(IStr), 'ВНИМАНИЕ!!!', MB_ICONINFORMATION+MB_OK);              //
end;                                                                                     //
///////////////////////////////////////////////////////////////////////////////////////////


end.
